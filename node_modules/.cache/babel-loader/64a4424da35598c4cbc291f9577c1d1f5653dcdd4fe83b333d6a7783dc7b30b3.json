{"ast":null,"code":"import { tokens } from \"../theme\";\nconst myWs = new WebSocket('ws://localhost:8000');\n//const frontDatabase = [];\n// обработчик проинформирует в консоль когда соединение установится\nmyWs.onopen = function () {\n  console.log('подключился');\n};\n// обработчик сообщений от сервера\nmyWs.onmessage = function (message) {\n  const jsonParse1 = JSON.parse(message.data);\n  const jsonParse = Number(jsonParse1);\n  try {\n    for (let i = 0; i < jsonParse.length; i++) {\n      mockLineData.data[i].x = jsonParse[i];\n      mockLineData.data[i].y = i;\n      console.log(mockLineData.data[i].x);\n      console.log(mockLineData.data[i].y);\n    }\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n};\nexport const mockLineData = [{\n  id: \"ИБП Uвх\",\n  color: tokens(\"dark\").redAccent[200],\n  data: [{\n    x: 0,\n    y: 1\n  }]\n}];","map":{"version":3,"names":["tokens","myWs","WebSocket","onopen","console","log","onmessage","message","jsonParse1","JSON","parse","data","jsonParse","Number","i","length","mockLineData","x","y","error","id","color","redAccent"],"sources":["C:/db/dashboard_react/src/data/dataLineGraph.js"],"sourcesContent":["import { tokens } from \"../theme\";\r\n\r\n\r\n\r\nconst myWs = new WebSocket('ws://localhost:8000');\r\n//const frontDatabase = [];\r\n// обработчик проинформирует в консоль когда соединение установится\r\nmyWs.onopen = function () {\r\n    console.log('подключился');\r\n};\r\n// обработчик сообщений от сервера\r\nmyWs.onmessage = function (message) {\r\n    const jsonParse1 = JSON.parse(message.data);\r\n    const jsonParse = Number(jsonParse1);\r\n    try {\r\n        for (let i = 0; i < jsonParse.length; i++) {\r\n            mockLineData.data[i].x = jsonParse[i];\r\n            mockLineData.data[i].y = i;     \r\n            console.log(mockLineData.data[i].x) \r\n            console.log(mockLineData.data[i].y)               \r\n        }        \r\n    } catch (error) {\r\n        console.log('Error: ', error);\r\n    }\r\n};\r\n\r\nexport const mockLineData = [\r\n  {\r\n    id: \"ИБП Uвх\",\r\n    color: tokens(\"dark\").redAccent[200],\r\n    data: [\r\n      {\r\n        x: 0, \r\n        y: 1,\r\n      }\r\n    ],\r\n  },\r\n];"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AAIjC,MAAMC,IAAI,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;AACjD;AACA;AACAD,IAAI,CAACE,MAAM,GAAG,YAAY;EACtBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;AAC9B,CAAC;AACD;AACAJ,IAAI,CAACK,SAAS,GAAG,UAAUC,OAAO,EAAE;EAChC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;EAC3C,MAAMC,SAAS,GAAGC,MAAM,CAACL,UAAU,CAAC;EACpC,IAAI;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACvCE,YAAY,CAACL,IAAI,CAACG,CAAC,CAAC,CAACG,CAAC,GAAGL,SAAS,CAACE,CAAC,CAAC;MACrCE,YAAY,CAACL,IAAI,CAACG,CAAC,CAAC,CAACI,CAAC,GAAGJ,CAAC;MAC1BV,OAAO,CAACC,GAAG,CAACW,YAAY,CAACL,IAAI,CAACG,CAAC,CAAC,CAACG,CAAC,CAAC;MACnCb,OAAO,CAACC,GAAG,CAACW,YAAY,CAACL,IAAI,CAACG,CAAC,CAAC,CAACI,CAAC,CAAC;IACvC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZf,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEc,KAAK,CAAC;EACjC;AACJ,CAAC;AAED,OAAO,MAAMH,YAAY,GAAG,CAC1B;EACEI,EAAE,EAAE,SAAS;EACbC,KAAK,EAAErB,MAAM,CAAC,MAAM,CAAC,CAACsB,SAAS,CAAC,GAAG,CAAC;EACpCX,IAAI,EAAE,CACJ;IACEM,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC;AAEL,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}